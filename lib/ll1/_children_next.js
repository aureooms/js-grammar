'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = _children_next;

var _error = require('../error');

var _parse2 = require('./_parse');

var _parse3 = _interopRequireDefault(_parse2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Get next child of table-driven predictive parsing.
 *
 * @param eof
 * @param productions
 * @param table
 * @param stream
 * @param expected
 * @returns {Array}
 */
function _children_next(eof, productions, table, stream, expected) {

	var lookahead = stream.read();

	if (expected.terminal === eof) {
		if (lookahead === stream.eof) return expected;else throw new _error.ExpectedEndOfFileError(lookahead.terminal);
	}

	if (expected.type === 'leaf') {
		if (lookahead.terminal === expected.terminal) return lookahead;else throw new _error.LookaheadMismatchError(lookahead.terminal, [expected.terminal]);
	}

	stream.unread(lookahead);

	var router = table.get(expected.nonterminal);

	var next = router.get(lookahead === stream.eof ? eof : lookahead.terminal);

	if (next === undefined) throw new _error.LookaheadMismatchError(lookahead.terminal, [].concat(_toConsumableArray(router.keys())));else return (0, _parse3.default)(eof, productions, table, productions.get(expected.nonterminal).get(next), stream, expected.nonterminal, next);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sbDEvX2NoaWxkcmVuX25leHQuanMiXSwibmFtZXMiOlsiX2NoaWxkcmVuX25leHQiLCJlb2YiLCJwcm9kdWN0aW9ucyIsInRhYmxlIiwic3RyZWFtIiwiZXhwZWN0ZWQiLCJsb29rYWhlYWQiLCJyZWFkIiwidGVybWluYWwiLCJ0eXBlIiwidW5yZWFkIiwicm91dGVyIiwiZ2V0Iiwibm9udGVybWluYWwiLCJuZXh0IiwidW5kZWZpbmVkIiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBYXdCQSxjOztBQWJ4Qjs7QUFDQTs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7OztBQVVlLFNBQVNBLGNBQVQsQ0FBMEJDLEdBQTFCLEVBQStCQyxXQUEvQixFQUE2Q0MsS0FBN0MsRUFBcURDLE1BQXJELEVBQThEQyxRQUE5RCxFQUF5RTs7QUFFdkYsS0FBTUMsWUFBWUYsT0FBT0csSUFBUCxFQUFsQjs7QUFFQSxLQUFLRixTQUFTRyxRQUFULEtBQXNCUCxHQUEzQixFQUFpQztBQUNoQyxNQUFLSyxjQUFjRixPQUFPSCxHQUExQixFQUFnQyxPQUFPSSxRQUFQLENBQWhDLEtBQ0ssTUFBTSxrQ0FBNEJDLFVBQVVFLFFBQXRDLENBQU47QUFDTDs7QUFFRCxLQUFLSCxTQUFTSSxJQUFULEtBQWtCLE1BQXZCLEVBQWdDO0FBQy9CLE1BQUtILFVBQVVFLFFBQVYsS0FBdUJILFNBQVNHLFFBQXJDLEVBQWdELE9BQU9GLFNBQVAsQ0FBaEQsS0FDSyxNQUFNLGtDQUEyQkEsVUFBVUUsUUFBckMsRUFBK0MsQ0FBQ0gsU0FBU0csUUFBVixDQUEvQyxDQUFOO0FBQ0w7O0FBRURKLFFBQU9NLE1BQVAsQ0FBY0osU0FBZDs7QUFFQSxLQUFNSyxTQUFTUixNQUFNUyxHQUFOLENBQVVQLFNBQVNRLFdBQW5CLENBQWY7O0FBRUEsS0FBTUMsT0FBT0gsT0FBT0MsR0FBUCxDQUFXTixjQUFjRixPQUFPSCxHQUFyQixHQUEyQkEsR0FBM0IsR0FBaUNLLFVBQVVFLFFBQXRELENBQWI7O0FBRUEsS0FBS00sU0FBU0MsU0FBZCxFQUEwQixNQUFNLGtDQUEyQlQsVUFBVUUsUUFBckMsK0JBQW1ERyxPQUFPSyxJQUFQLEVBQW5ELEdBQU4sQ0FBMUIsS0FFSyxPQUFPLHFCQUFPZixHQUFQLEVBQVlDLFdBQVosRUFBeUJDLEtBQXpCLEVBQWdDRCxZQUFZVSxHQUFaLENBQWdCUCxTQUFTUSxXQUF6QixFQUFzQ0QsR0FBdEMsQ0FBMENFLElBQTFDLENBQWhDLEVBQWlGVixNQUFqRixFQUEwRkMsU0FBU1EsV0FBbkcsRUFBaUhDLElBQWpILENBQVA7QUFFTCIsImZpbGUiOiJfY2hpbGRyZW5fbmV4dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvb2thaGVhZE1pc21hdGNoRXJyb3IgLCBFeHBlY3RlZEVuZE9mRmlsZUVycm9yIH0gZnJvbSAnLi4vZXJyb3InIDtcbmltcG9ydCBfcGFyc2UgZnJvbSAnLi9fcGFyc2UnIDtcblxuLyoqXG4gKiBHZXQgbmV4dCBjaGlsZCBvZiB0YWJsZS1kcml2ZW4gcHJlZGljdGl2ZSBwYXJzaW5nLlxuICpcbiAqIEBwYXJhbSBlb2ZcbiAqIEBwYXJhbSBwcm9kdWN0aW9uc1xuICogQHBhcmFtIHRhYmxlXG4gKiBAcGFyYW0gc3RyZWFtXG4gKiBAcGFyYW0gZXhwZWN0ZWRcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NoaWxkcmVuX25leHQgKCBlb2YsIHByb2R1Y3Rpb25zICwgdGFibGUgLCBzdHJlYW0gLCBleHBlY3RlZCApIHtcblxuXHRjb25zdCBsb29rYWhlYWQgPSBzdHJlYW0ucmVhZCggKSA7XG5cblx0aWYgKCBleHBlY3RlZC50ZXJtaW5hbCA9PT0gZW9mICkge1xuXHRcdGlmICggbG9va2FoZWFkID09PSBzdHJlYW0uZW9mICkgcmV0dXJuIGV4cGVjdGVkIDtcblx0XHRlbHNlIHRocm93IG5ldyBFeHBlY3RlZEVuZE9mRmlsZUVycm9yKCBsb29rYWhlYWQudGVybWluYWwgKSA7XG5cdH1cblxuXHRpZiAoIGV4cGVjdGVkLnR5cGUgPT09ICdsZWFmJyApIHtcblx0XHRpZiAoIGxvb2thaGVhZC50ZXJtaW5hbCA9PT0gZXhwZWN0ZWQudGVybWluYWwgKSByZXR1cm4gbG9va2FoZWFkIDtcblx0XHRlbHNlIHRocm93IG5ldyBMb29rYWhlYWRNaXNtYXRjaEVycm9yKGxvb2thaGVhZC50ZXJtaW5hbCwgW2V4cGVjdGVkLnRlcm1pbmFsXSkgO1xuXHR9XG5cblx0c3RyZWFtLnVucmVhZChsb29rYWhlYWQpO1xuXG5cdGNvbnN0IHJvdXRlciA9IHRhYmxlLmdldChleHBlY3RlZC5ub250ZXJtaW5hbCk7XG5cblx0Y29uc3QgbmV4dCA9IHJvdXRlci5nZXQobG9va2FoZWFkID09PSBzdHJlYW0uZW9mID8gZW9mIDogbG9va2FoZWFkLnRlcm1pbmFsKSA7XG5cblx0aWYgKCBuZXh0ID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgTG9va2FoZWFkTWlzbWF0Y2hFcnJvcihsb29rYWhlYWQudGVybWluYWwsIFsuLi5yb3V0ZXIua2V5cygpXSkgO1xuXG5cdGVsc2UgcmV0dXJuIF9wYXJzZShlb2YsIHByb2R1Y3Rpb25zLCB0YWJsZSwgcHJvZHVjdGlvbnMuZ2V0KGV4cGVjdGVkLm5vbnRlcm1pbmFsKS5nZXQobmV4dCksIHN0cmVhbSAsIGV4cGVjdGVkLm5vbnRlcm1pbmFsICwgbmV4dCk7XG5cbn1cbiJdfQ==