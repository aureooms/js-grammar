'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = _children_next_lazy;

var _error = require('../error');

var _parse_lazy2 = require('./_parse_lazy');

var _parse_lazy3 = _interopRequireDefault(_parse_lazy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Get next child of table-driven predictive lazy parsing.
 *
 * @param grammar
 * @param table
 * @param stream
 * @param token
 * @returns {Array}
 */
function _children_next_lazy(eof, grammar, table, stream, expected) {

	var lookahead = stream.read();

	if (lookahead === stream.eof) {
		if (expected.terminal === eof) return expected;else throw new _error.ExpectedEndOfFileError(lookahead);
	}

	if (expected.type === 'leaf') {
		if (lookahead.terminal === expected.terminal) return lookahead;else throw new _error.LookaheadMismatchError(lookahead, [expected]);
	}

	stream.unread(lookahead);

	var router = table.get(expected.nonterminal);

	var next = router.get(lookahead === stream.eof ? eof : lookahead.terminal);

	if (next === undefined) throw new _error.LookaheadMismatchError(lookahead, [].concat(_toConsumableArray(router.keys())));else return (0, _parse_lazy3.default)(eof, grammar, table, grammar.get(expected.nonterminal).get(next), stream, expected.nonterminal, next);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sbDEvX2NoaWxkcmVuX25leHRfbGF6eS5qcyJdLCJuYW1lcyI6WyJfY2hpbGRyZW5fbmV4dF9sYXp5IiwiZW9mIiwiZ3JhbW1hciIsInRhYmxlIiwic3RyZWFtIiwiZXhwZWN0ZWQiLCJsb29rYWhlYWQiLCJyZWFkIiwidGVybWluYWwiLCJ0eXBlIiwidW5yZWFkIiwicm91dGVyIiwiZ2V0Iiwibm9udGVybWluYWwiLCJuZXh0IiwidW5kZWZpbmVkIiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBWXdCQSxtQjs7QUFaeEI7O0FBQ0E7Ozs7Ozs7O0FBRUE7Ozs7Ozs7OztBQVNlLFNBQVNBLG1CQUFULENBQStCQyxHQUEvQixFQUFvQ0MsT0FBcEMsRUFBOENDLEtBQTlDLEVBQXNEQyxNQUF0RCxFQUErREMsUUFBL0QsRUFBMEU7O0FBRXhGLEtBQU1DLFlBQVlGLE9BQU9HLElBQVAsRUFBbEI7O0FBRUEsS0FBS0QsY0FBY0YsT0FBT0gsR0FBMUIsRUFBZ0M7QUFDL0IsTUFBS0ksU0FBU0csUUFBVCxLQUFzQlAsR0FBM0IsRUFBaUMsT0FBT0ksUUFBUCxDQUFqQyxLQUNLLE1BQU0sa0NBQTRCQyxTQUE1QixDQUFOO0FBQ0w7O0FBRUQsS0FBS0QsU0FBU0ksSUFBVCxLQUFrQixNQUF2QixFQUFnQztBQUMvQixNQUFLSCxVQUFVRSxRQUFWLEtBQXVCSCxTQUFTRyxRQUFyQyxFQUFnRCxPQUFPRixTQUFQLENBQWhELEtBQ0ssTUFBTSxrQ0FBMkJBLFNBQTNCLEVBQXNDLENBQUNELFFBQUQsQ0FBdEMsQ0FBTjtBQUNMOztBQUVERCxRQUFPTSxNQUFQLENBQWNKLFNBQWQ7O0FBRUEsS0FBTUssU0FBU1IsTUFBTVMsR0FBTixDQUFVUCxTQUFTUSxXQUFuQixDQUFmOztBQUVBLEtBQU1DLE9BQU9ILE9BQU9DLEdBQVAsQ0FBV04sY0FBY0YsT0FBT0gsR0FBckIsR0FBMkJBLEdBQTNCLEdBQWlDSyxVQUFVRSxRQUF0RCxDQUFiOztBQUVBLEtBQUtNLFNBQVNDLFNBQWQsRUFBMEIsTUFBTSxrQ0FBMkJULFNBQTNCLCtCQUEwQ0ssT0FBT0ssSUFBUCxFQUExQyxHQUFOLENBQTFCLEtBRUssT0FBTywwQkFBWWYsR0FBWixFQUFpQkMsT0FBakIsRUFBMEJDLEtBQTFCLEVBQWlDRCxRQUFRVSxHQUFSLENBQVlQLFNBQVNRLFdBQXJCLEVBQWtDRCxHQUFsQyxDQUFzQ0UsSUFBdEMsQ0FBakMsRUFBOEVWLE1BQTlFLEVBQXVGQyxTQUFTUSxXQUFoRyxFQUE4R0MsSUFBOUcsQ0FBUDtBQUVMIiwiZmlsZSI6Il9jaGlsZHJlbl9uZXh0X2xhenkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb29rYWhlYWRNaXNtYXRjaEVycm9yICwgRXhwZWN0ZWRFbmRPZkZpbGVFcnJvciB9IGZyb20gJy4uL2Vycm9yJyA7XG5pbXBvcnQgX3BhcnNlX2xhenkgZnJvbSAnLi9fcGFyc2VfbGF6eScgO1xuXG4vKipcbiAqIEdldCBuZXh0IGNoaWxkIG9mIHRhYmxlLWRyaXZlbiBwcmVkaWN0aXZlIGxhenkgcGFyc2luZy5cbiAqXG4gKiBAcGFyYW0gZ3JhbW1hclxuICogQHBhcmFtIHRhYmxlXG4gKiBAcGFyYW0gc3RyZWFtXG4gKiBAcGFyYW0gdG9rZW5cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NoaWxkcmVuX25leHRfbGF6eSAoIGVvZiwgZ3JhbW1hciAsIHRhYmxlICwgc3RyZWFtICwgZXhwZWN0ZWQgKSB7XG5cblx0Y29uc3QgbG9va2FoZWFkID0gc3RyZWFtLnJlYWQoICkgO1xuXG5cdGlmICggbG9va2FoZWFkID09PSBzdHJlYW0uZW9mICkge1xuXHRcdGlmICggZXhwZWN0ZWQudGVybWluYWwgPT09IGVvZiApIHJldHVybiBleHBlY3RlZCA7XG5cdFx0ZWxzZSB0aHJvdyBuZXcgRXhwZWN0ZWRFbmRPZkZpbGVFcnJvciggbG9va2FoZWFkICkgO1xuXHR9XG5cblx0aWYgKCBleHBlY3RlZC50eXBlID09PSAnbGVhZicgKSB7XG5cdFx0aWYgKCBsb29rYWhlYWQudGVybWluYWwgPT09IGV4cGVjdGVkLnRlcm1pbmFsICkgcmV0dXJuIGxvb2thaGVhZCA7XG5cdFx0ZWxzZSB0aHJvdyBuZXcgTG9va2FoZWFkTWlzbWF0Y2hFcnJvcihsb29rYWhlYWQsIFtleHBlY3RlZF0pIDtcblx0fVxuXG5cdHN0cmVhbS51bnJlYWQobG9va2FoZWFkKTtcblxuXHRjb25zdCByb3V0ZXIgPSB0YWJsZS5nZXQoZXhwZWN0ZWQubm9udGVybWluYWwpO1xuXG5cdGNvbnN0IG5leHQgPSByb3V0ZXIuZ2V0KGxvb2thaGVhZCA9PT0gc3RyZWFtLmVvZiA/IGVvZiA6IGxvb2thaGVhZC50ZXJtaW5hbCkgO1xuXG5cdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkgdGhyb3cgbmV3IExvb2thaGVhZE1pc21hdGNoRXJyb3IobG9va2FoZWFkLCBbLi4ucm91dGVyLmtleXMoKV0pIDtcblxuXHRlbHNlIHJldHVybiBfcGFyc2VfbGF6eShlb2YsIGdyYW1tYXIsIHRhYmxlLCBncmFtbWFyLmdldChleHBlY3RlZC5ub250ZXJtaW5hbCkuZ2V0KG5leHQpLCBzdHJlYW0gLCBleHBlY3RlZC5ub250ZXJtaW5hbCAsIG5leHQpO1xuXG59XG4iXX0=