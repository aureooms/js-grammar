'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = _children_next_lazy;

var _error = require('../error');

var _parse_lazy2 = require('./_parse_lazy');

var _parse_lazy3 = _interopRequireDefault(_parse_lazy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Get next child of table-driven predictive lazy parsing.
 *
 * @param grammar
 * @param table
 * @param stream
 * @param token
 * @returns {Array}
 */
function _children_next_lazy(eof, grammar, table, stream, expected) {

	var lookahead = stream.read();

	if (expected.type === 'leaf') {
		if (lookahead === stream.eof) {
			if (expected.terminal === eof) return expected;else throw new _error.UnexpectedEndOfFileError([expected.terminal]);
		} else if (lookahead.terminal === expected.terminal) return lookahead;else throw new _error.LookaheadMismatchError(lookahead, [expected.terminal]);
	}

	stream.unread(lookahead);

	var router = table.get(expected.nonterminal);

	var next = router.get(lookahead === stream.eof ? eof : lookahead.terminal);

	if (next === undefined) throw new _error.LookaheadMismatchError(lookahead, [].concat(_toConsumableArray(router.keys())));else return (0, _parse_lazy3.default)(eof, grammar, table, grammar.get(expected.nonterminal).get(next), stream, expected.nonterminal, next);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sbDEvX2NoaWxkcmVuX25leHRfbGF6eS5qcyJdLCJuYW1lcyI6WyJfY2hpbGRyZW5fbmV4dF9sYXp5IiwiZW9mIiwiZ3JhbW1hciIsInRhYmxlIiwic3RyZWFtIiwiZXhwZWN0ZWQiLCJsb29rYWhlYWQiLCJyZWFkIiwidHlwZSIsInRlcm1pbmFsIiwidW5yZWFkIiwicm91dGVyIiwiZ2V0Iiwibm9udGVybWluYWwiLCJuZXh0IiwidW5kZWZpbmVkIiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBWXdCQSxtQjs7QUFaeEI7O0FBQ0E7Ozs7Ozs7O0FBRUE7Ozs7Ozs7OztBQVNlLFNBQVNBLG1CQUFULENBQStCQyxHQUEvQixFQUFvQ0MsT0FBcEMsRUFBOENDLEtBQTlDLEVBQXNEQyxNQUF0RCxFQUErREMsUUFBL0QsRUFBMEU7O0FBRXhGLEtBQU1DLFlBQVlGLE9BQU9HLElBQVAsRUFBbEI7O0FBRUEsS0FBS0YsU0FBU0csSUFBVCxLQUFrQixNQUF2QixFQUFnQztBQUMvQixNQUFLRixjQUFjRixPQUFPSCxHQUExQixFQUFnQztBQUMvQixPQUFLSSxTQUFTSSxRQUFULEtBQXNCUixHQUEzQixFQUFpQyxPQUFPSSxRQUFQLENBQWpDLEtBQ0ssTUFBTSxvQ0FBOEIsQ0FBQ0EsU0FBU0ksUUFBVixDQUE5QixDQUFOO0FBQ0wsR0FIRCxNQUlLLElBQUtILFVBQVVHLFFBQVYsS0FBdUJKLFNBQVNJLFFBQXJDLEVBQWdELE9BQU9ILFNBQVAsQ0FBaEQsS0FDQSxNQUFNLGtDQUEyQkEsU0FBM0IsRUFBc0MsQ0FBQ0QsU0FBU0ksUUFBVixDQUF0QyxDQUFOO0FBQ0w7O0FBRURMLFFBQU9NLE1BQVAsQ0FBY0osU0FBZDs7QUFFQSxLQUFNSyxTQUFTUixNQUFNUyxHQUFOLENBQVVQLFNBQVNRLFdBQW5CLENBQWY7O0FBRUEsS0FBTUMsT0FBT0gsT0FBT0MsR0FBUCxDQUFXTixjQUFjRixPQUFPSCxHQUFyQixHQUEyQkEsR0FBM0IsR0FBaUNLLFVBQVVHLFFBQXRELENBQWI7O0FBRUEsS0FBS0ssU0FBU0MsU0FBZCxFQUEwQixNQUFNLGtDQUEyQlQsU0FBM0IsK0JBQTBDSyxPQUFPSyxJQUFQLEVBQTFDLEdBQU4sQ0FBMUIsS0FFSyxPQUFPLDBCQUFZZixHQUFaLEVBQWlCQyxPQUFqQixFQUEwQkMsS0FBMUIsRUFBaUNELFFBQVFVLEdBQVIsQ0FBWVAsU0FBU1EsV0FBckIsRUFBa0NELEdBQWxDLENBQXNDRSxJQUF0QyxDQUFqQyxFQUE4RVYsTUFBOUUsRUFBdUZDLFNBQVNRLFdBQWhHLEVBQThHQyxJQUE5RyxDQUFQO0FBRUwiLCJmaWxlIjoiX2NoaWxkcmVuX25leHRfbGF6eS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvb2thaGVhZE1pc21hdGNoRXJyb3IgLCBVbmV4cGVjdGVkRW5kT2ZGaWxlRXJyb3IgfSBmcm9tICcuLi9lcnJvcicgO1xuaW1wb3J0IF9wYXJzZV9sYXp5IGZyb20gJy4vX3BhcnNlX2xhenknIDtcblxuLyoqXG4gKiBHZXQgbmV4dCBjaGlsZCBvZiB0YWJsZS1kcml2ZW4gcHJlZGljdGl2ZSBsYXp5IHBhcnNpbmcuXG4gKlxuICogQHBhcmFtIGdyYW1tYXJcbiAqIEBwYXJhbSB0YWJsZVxuICogQHBhcmFtIHN0cmVhbVxuICogQHBhcmFtIHRva2VuXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jaGlsZHJlbl9uZXh0X2xhenkgKCBlb2YsIGdyYW1tYXIgLCB0YWJsZSAsIHN0cmVhbSAsIGV4cGVjdGVkICkge1xuXG5cdGNvbnN0IGxvb2thaGVhZCA9IHN0cmVhbS5yZWFkKCApIDtcblxuXHRpZiAoIGV4cGVjdGVkLnR5cGUgPT09ICdsZWFmJyApIHtcblx0XHRpZiAoIGxvb2thaGVhZCA9PT0gc3RyZWFtLmVvZiApIHtcblx0XHRcdGlmICggZXhwZWN0ZWQudGVybWluYWwgPT09IGVvZiApIHJldHVybiBleHBlY3RlZCA7XG5cdFx0XHRlbHNlIHRocm93IG5ldyBVbmV4cGVjdGVkRW5kT2ZGaWxlRXJyb3IoIFtleHBlY3RlZC50ZXJtaW5hbF0gKSA7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCBsb29rYWhlYWQudGVybWluYWwgPT09IGV4cGVjdGVkLnRlcm1pbmFsICkgcmV0dXJuIGxvb2thaGVhZCA7XG5cdFx0ZWxzZSB0aHJvdyBuZXcgTG9va2FoZWFkTWlzbWF0Y2hFcnJvcihsb29rYWhlYWQsIFtleHBlY3RlZC50ZXJtaW5hbF0pIDtcblx0fVxuXG5cdHN0cmVhbS51bnJlYWQobG9va2FoZWFkKTtcblxuXHRjb25zdCByb3V0ZXIgPSB0YWJsZS5nZXQoZXhwZWN0ZWQubm9udGVybWluYWwpO1xuXG5cdGNvbnN0IG5leHQgPSByb3V0ZXIuZ2V0KGxvb2thaGVhZCA9PT0gc3RyZWFtLmVvZiA/IGVvZiA6IGxvb2thaGVhZC50ZXJtaW5hbCkgO1xuXG5cdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkgdGhyb3cgbmV3IExvb2thaGVhZE1pc21hdGNoRXJyb3IobG9va2FoZWFkLCBbLi4ucm91dGVyLmtleXMoKV0pIDtcblxuXHRlbHNlIHJldHVybiBfcGFyc2VfbGF6eShlb2YsIGdyYW1tYXIsIHRhYmxlLCBncmFtbWFyLmdldChleHBlY3RlZC5ub250ZXJtaW5hbCkuZ2V0KG5leHQpLCBzdHJlYW0gLCBleHBlY3RlZC5ub250ZXJtaW5hbCAsIG5leHQpO1xuXG59XG4iXX0=