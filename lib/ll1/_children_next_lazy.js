'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = _children_next_lazy;

var _error = require('../error');

var _parse_lazy2 = require('./_parse_lazy');

var _parse_lazy3 = _interopRequireDefault(_parse_lazy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Get next child of table-driven predictive lazy parsing.
 *
 * @param grammar
 * @param table
 * @param stream
 * @param token
 * @returns {Array}
 */
function _children_next_lazy(eof, grammar, table, stream, expected) {

	var lookahead = stream.read();

	if (expected.type === 'leaf') {
		if (lookahead === stream.eof) {
			if (expected.terminal === eof) return expected;else throw new _error.UnexpectedEndOfFileError([expected.terminal]);
		} else if (lookahead.terminal === expected.terminal) return lookahead;else throw new _error.LookaheadMismatchError(lookahead, [expected.terminal]);
	}

	stream.unread(lookahead);

	var router = table.get(expected.nonterminal);

	var next = router.get(lookahead === stream.eof ? eof : lookahead.terminal);

	if (next === undefined) throw new _error.LookaheadMismatchError(lookahead, [].concat(_toConsumableArray(router.keys())));else return (0, _parse_lazy3.default)(eof, grammar, table, grammar.get(expected.nonterminal).get(next), stream, expected.nonterminal, next);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sbDEvX2NoaWxkcmVuX25leHRfbGF6eS5qcyJdLCJuYW1lcyI6WyJfY2hpbGRyZW5fbmV4dF9sYXp5IiwiZW9mIiwiZ3JhbW1hciIsInRhYmxlIiwic3RyZWFtIiwiZXhwZWN0ZWQiLCJsb29rYWhlYWQiLCJyZWFkIiwidHlwZSIsInRlcm1pbmFsIiwiVW5leHBlY3RlZEVuZE9mRmlsZUVycm9yIiwiTG9va2FoZWFkTWlzbWF0Y2hFcnJvciIsInVucmVhZCIsInJvdXRlciIsImdldCIsIm5vbnRlcm1pbmFsIiwibmV4dCIsInVuZGVmaW5lZCIsImtleXMiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVl3QkEsbUI7O0FBWnhCOztBQUNBOzs7Ozs7OztBQUVBOzs7Ozs7Ozs7QUFTZSxTQUFTQSxtQkFBVCxDQUErQkMsR0FBL0IsRUFBb0NDLE9BQXBDLEVBQThDQyxLQUE5QyxFQUFzREMsTUFBdEQsRUFBK0RDLFFBQS9ELEVBQTBFOztBQUV4RixLQUFNQyxZQUFZRixPQUFPRyxJQUFQLEVBQWxCOztBQUVBLEtBQUtGLFNBQVNHLElBQVQsS0FBa0IsTUFBdkIsRUFBZ0M7QUFDL0IsTUFBS0YsY0FBY0YsT0FBT0gsR0FBMUIsRUFBZ0M7QUFDL0IsT0FBS0ksU0FBU0ksUUFBVCxLQUFzQlIsR0FBM0IsRUFBaUMsT0FBT0ksUUFBUCxDQUFqQyxLQUNLLE1BQU0sSUFBSUssK0JBQUosQ0FBOEIsQ0FBQ0wsU0FBU0ksUUFBVixDQUE5QixDQUFOO0FBQ0wsR0FIRCxNQUlLLElBQUtILFVBQVVHLFFBQVYsS0FBdUJKLFNBQVNJLFFBQXJDLEVBQWdELE9BQU9ILFNBQVAsQ0FBaEQsS0FDQSxNQUFNLElBQUlLLDZCQUFKLENBQTJCTCxTQUEzQixFQUFzQyxDQUFDRCxTQUFTSSxRQUFWLENBQXRDLENBQU47QUFDTDs7QUFFREwsUUFBT1EsTUFBUCxDQUFjTixTQUFkOztBQUVBLEtBQU1PLFNBQVNWLE1BQU1XLEdBQU4sQ0FBVVQsU0FBU1UsV0FBbkIsQ0FBZjs7QUFFQSxLQUFNQyxPQUFPSCxPQUFPQyxHQUFQLENBQVdSLGNBQWNGLE9BQU9ILEdBQXJCLEdBQTJCQSxHQUEzQixHQUFpQ0ssVUFBVUcsUUFBdEQsQ0FBYjs7QUFFQSxLQUFLTyxTQUFTQyxTQUFkLEVBQTBCLE1BQU0sSUFBSU4sNkJBQUosQ0FBMkJMLFNBQTNCLCtCQUEwQ08sT0FBT0ssSUFBUCxFQUExQyxHQUFOLENBQTFCLEtBRUssT0FBTywwQkFBWWpCLEdBQVosRUFBaUJDLE9BQWpCLEVBQTBCQyxLQUExQixFQUFpQ0QsUUFBUVksR0FBUixDQUFZVCxTQUFTVSxXQUFyQixFQUFrQ0QsR0FBbEMsQ0FBc0NFLElBQXRDLENBQWpDLEVBQThFWixNQUE5RSxFQUF1RkMsU0FBU1UsV0FBaEcsRUFBOEdDLElBQTlHLENBQVA7QUFFTCIsImZpbGUiOiJfY2hpbGRyZW5fbmV4dF9sYXp5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9va2FoZWFkTWlzbWF0Y2hFcnJvciAsIFVuZXhwZWN0ZWRFbmRPZkZpbGVFcnJvciB9IGZyb20gJy4uL2Vycm9yJyA7XG5pbXBvcnQgX3BhcnNlX2xhenkgZnJvbSAnLi9fcGFyc2VfbGF6eScgO1xuXG4vKipcbiAqIEdldCBuZXh0IGNoaWxkIG9mIHRhYmxlLWRyaXZlbiBwcmVkaWN0aXZlIGxhenkgcGFyc2luZy5cbiAqXG4gKiBAcGFyYW0gZ3JhbW1hclxuICogQHBhcmFtIHRhYmxlXG4gKiBAcGFyYW0gc3RyZWFtXG4gKiBAcGFyYW0gdG9rZW5cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NoaWxkcmVuX25leHRfbGF6eSAoIGVvZiwgZ3JhbW1hciAsIHRhYmxlICwgc3RyZWFtICwgZXhwZWN0ZWQgKSB7XG5cblx0Y29uc3QgbG9va2FoZWFkID0gc3RyZWFtLnJlYWQoICkgO1xuXG5cdGlmICggZXhwZWN0ZWQudHlwZSA9PT0gJ2xlYWYnICkge1xuXHRcdGlmICggbG9va2FoZWFkID09PSBzdHJlYW0uZW9mICkge1xuXHRcdFx0aWYgKCBleHBlY3RlZC50ZXJtaW5hbCA9PT0gZW9mICkgcmV0dXJuIGV4cGVjdGVkIDtcblx0XHRcdGVsc2UgdGhyb3cgbmV3IFVuZXhwZWN0ZWRFbmRPZkZpbGVFcnJvciggW2V4cGVjdGVkLnRlcm1pbmFsXSApIDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIGxvb2thaGVhZC50ZXJtaW5hbCA9PT0gZXhwZWN0ZWQudGVybWluYWwgKSByZXR1cm4gbG9va2FoZWFkIDtcblx0XHRlbHNlIHRocm93IG5ldyBMb29rYWhlYWRNaXNtYXRjaEVycm9yKGxvb2thaGVhZCwgW2V4cGVjdGVkLnRlcm1pbmFsXSkgO1xuXHR9XG5cblx0c3RyZWFtLnVucmVhZChsb29rYWhlYWQpO1xuXG5cdGNvbnN0IHJvdXRlciA9IHRhYmxlLmdldChleHBlY3RlZC5ub250ZXJtaW5hbCk7XG5cblx0Y29uc3QgbmV4dCA9IHJvdXRlci5nZXQobG9va2FoZWFkID09PSBzdHJlYW0uZW9mID8gZW9mIDogbG9va2FoZWFkLnRlcm1pbmFsKSA7XG5cblx0aWYgKCBuZXh0ID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgTG9va2FoZWFkTWlzbWF0Y2hFcnJvcihsb29rYWhlYWQsIFsuLi5yb3V0ZXIua2V5cygpXSkgO1xuXG5cdGVsc2UgcmV0dXJuIF9wYXJzZV9sYXp5KGVvZiwgZ3JhbW1hciwgdGFibGUsIGdyYW1tYXIuZ2V0KGV4cGVjdGVkLm5vbnRlcm1pbmFsKS5nZXQobmV4dCksIHN0cmVhbSAsIGV4cGVjdGVkLm5vbnRlcm1pbmFsICwgbmV4dCk7XG5cbn1cbiJdfQ==